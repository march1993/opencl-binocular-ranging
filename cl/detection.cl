#define EDGE 5

#define M_PI_8 (M_PI_4 / 2)

// see descriptor_weight.js
__constant float descriptor_weight[256] = {
	0.002213545499867502,
	0.0024693884492812852,
	0.0027120926394934206,
	0.0029324713409773348,
	0.003121599493405797,
	0.003271408180988955,
	0.0033752538239739858,
	0.003428406337600025,
	0.003428406337600025,
	0.0033752538239739858,
	0.003271408180988955,
	0.003121599493405797,
	0.0029324713409773348,
	0.0027120926394934206,
	0.0024693884492812852,
	0.002213545499867502,
	0.0024693884492812852,
	0.0027548018840402593,
	0.003025557973733418,
	0.003271408180988955,
	0.0034823958815212966,
	0.003649519549294098,
	0.0037653677355232824,
	0.003824663649344012,
	0.003824663649344012,
	0.0037653677355232824,
	0.003649519549294098,
	0.0034823958815212966,
	0.003271408180988955,
	0.003025557973733418,
	0.0027548018840402593,
	0.0024693884492812852,
	0.0027120926394934206,
	0.003025557973733418,
	0.0033229253636912694,
	0.0035929389930616233,
	0.003824663649344012,
	0.004008213090252622,
	0.004135447431719749,
	0.00420057125275003,
	0.00420057125275003,
	0.004135447431719749,
	0.004008213090252622,
	0.003824663649344012,
	0.0035929389930616233,
	0.0033229253636912694,
	0.003025557973733418,
	0.0027120926394934206,
	0.0029324713409773348,
	0.003271408180988955,
	0.0035929389930616233,
	0.0038848933379359725,
	0.004135447431719749,
	0.004333911697755089,
	0.004471484822842057,
	0.004541900462781963,
	0.004541900462781963,
	0.004471484822842057,
	0.004333911697755089,
	0.004135447431719749,
	0.0038848933379359725,
	0.0035929389930616233,
	0.003271408180988955,
	0.0029324713409773348,
	0.003121599493405797,
	0.0034823958815212966,
	0.003824663649344012,
	0.004135447431719749,
	0.004402160876211766,
	0.004613424987699587,
	0.0047598708170506765,
	0.00483482787558786,
	0.00483482787558786,
	0.0047598708170506765,
	0.004613424987699587,
	0.004402160876211766,
	0.004135447431719749,
	0.003824663649344012,
	0.0034823958815212966,
	0.003121599493405797,
	0.003271408180988955,
	0.003649519549294098,
	0.004008213090252622,
	0.004333911697755089,
	0.004613424987699587,
	0.00483482787558786,
	0.004988301787030667,
	0.005066856109915269,
	0.005066856109915269,
	0.004988301787030667,
	0.00483482787558786,
	0.004613424987699587,
	0.004333911697755089,
	0.004008213090252622,
	0.003649519549294098,
	0.003271408180988955,
	0.0033752538239739858,
	0.0037653677355232824,
	0.004135447431719749,
	0.004471484822842057,
	0.0047598708170506765,
	0.004988301787030667,
	0.005146647483384883,
	0.005227695388151628,
	0.005227695388151628,
	0.005146647483384883,
	0.004988301787030667,
	0.0047598708170506765,
	0.004471484822842057,
	0.004135447431719749,
	0.0037653677355232824,
	0.0033752538239739858,
	0.003428406337600025,
	0.003824663649344012,
	0.00420057125275003,
	0.004541900462781963,
	0.00483482787558786,
	0.005066856109915269,
	0.005227695388151628,
	0.0053100196117041995,
	0.0053100196117041995,
	0.005227695388151628,
	0.005066856109915269,
	0.00483482787558786,
	0.004541900462781963,
	0.00420057125275003,
	0.003824663649344012,
	0.003428406337600025,
	0.003428406337600025,
	0.003824663649344012,
	0.00420057125275003,
	0.004541900462781963,
	0.00483482787558786,
	0.005066856109915269,
	0.005227695388151628,
	0.0053100196117041995,
	0.0053100196117041995,
	0.005227695388151628,
	0.005066856109915269,
	0.00483482787558786,
	0.004541900462781963,
	0.00420057125275003,
	0.003824663649344012,
	0.003428406337600025,
	0.0033752538239739858,
	0.0037653677355232824,
	0.004135447431719749,
	0.004471484822842057,
	0.0047598708170506765,
	0.004988301787030667,
	0.005146647483384883,
	0.005227695388151628,
	0.005227695388151628,
	0.005146647483384883,
	0.004988301787030667,
	0.0047598708170506765,
	0.004471484822842057,
	0.004135447431719749,
	0.0037653677355232824,
	0.0033752538239739858,
	0.003271408180988955,
	0.003649519549294098,
	0.004008213090252622,
	0.004333911697755089,
	0.004613424987699587,
	0.00483482787558786,
	0.004988301787030667,
	0.005066856109915269,
	0.005066856109915269,
	0.004988301787030667,
	0.00483482787558786,
	0.004613424987699587,
	0.004333911697755089,
	0.004008213090252622,
	0.003649519549294098,
	0.003271408180988955,
	0.003121599493405797,
	0.0034823958815212966,
	0.003824663649344012,
	0.004135447431719749,
	0.004402160876211766,
	0.004613424987699587,
	0.0047598708170506765,
	0.00483482787558786,
	0.00483482787558786,
	0.0047598708170506765,
	0.004613424987699587,
	0.004402160876211766,
	0.004135447431719749,
	0.003824663649344012,
	0.0034823958815212966,
	0.003121599493405797,
	0.0029324713409773348,
	0.003271408180988955,
	0.0035929389930616233,
	0.0038848933379359725,
	0.004135447431719749,
	0.004333911697755089,
	0.004471484822842057,
	0.004541900462781963,
	0.004541900462781963,
	0.004471484822842057,
	0.004333911697755089,
	0.004135447431719749,
	0.0038848933379359725,
	0.0035929389930616233,
	0.003271408180988955,
	0.0029324713409773348,
	0.0027120926394934206,
	0.003025557973733418,
	0.0033229253636912694,
	0.0035929389930616233,
	0.003824663649344012,
	0.004008213090252622,
	0.004135447431719749,
	0.00420057125275003,
	0.00420057125275003,
	0.004135447431719749,
	0.004008213090252622,
	0.003824663649344012,
	0.0035929389930616233,
	0.0033229253636912694,
	0.003025557973733418,
	0.0027120926394934206,
	0.0024693884492812852,
	0.0027548018840402593,
	0.003025557973733418,
	0.003271408180988955,
	0.0034823958815212966,
	0.003649519549294098,
	0.0037653677355232824,
	0.003824663649344012,
	0.003824663649344012,
	0.0037653677355232824,
	0.003649519549294098,
	0.0034823958815212966,
	0.003271408180988955,
	0.003025557973733418,
	0.0027548018840402593,
	0.0024693884492812852,
	0.002213545499867502,
	0.0024693884492812852,
	0.0027120926394934206,
	0.0029324713409773348,
	0.003121599493405797,
	0.003271408180988955,
	0.0033752538239739858,
	0.003428406337600025,
	0.003428406337600025,
	0.0033752538239739858,
	0.003271408180988955,
	0.003121599493405797,
	0.0029324713409773348,
	0.0027120926394934206,
	0.0024693884492812852,
	0.002213545499867502
};

__kernel void detection (
	__global const float * l,
	__global const float * m,
	__global const float * r,
	__global float * to,
	__global float * descriptor,
	const uint width,
	const uint height,
	const uint to_width,
	const uint to_height,
	const float n_th_blur) {

	// Get our global thread ID
	size_t
		x = get_global_id(0),
		y = get_global_id(1);

	// Make sure we do not go out of bounds
	if (x >= width) x = 0;
	if (y >= height) y = 0;


	float
		f111 = l[(y - 1) * width + (x - 1)],
		f112 = l[(y - 1) * width + (x + 0)],
		f113 = l[(y - 1) * width + (x + 1)],
		f121 = l[(y + 0) * width + (x - 1)],
		f122 = l[(y + 0) * width + (x + 0)],
		f123 = l[(y + 0) * width + (x + 1)],
		f131 = l[(y + 1) * width + (x - 1)],
		f132 = l[(y + 1) * width + (x + 0)],
		f133 = l[(y + 1) * width + (x + 1)],
		f211 = m[(y - 1) * width + (x - 1)],
		f212 = m[(y - 1) * width + (x + 0)],
		f213 = m[(y - 1) * width + (x + 1)],
		f221 = m[(y + 0) * width + (x - 1)],
		f222 = m[(y + 0) * width + (x + 0)],
		f223 = m[(y + 0) * width + (x + 1)],
		f231 = m[(y + 1) * width + (x - 1)],
		f232 = m[(y + 1) * width + (x + 0)],
		f233 = m[(y + 1) * width + (x + 1)],
		f311 = r[(y - 1) * width + (x - 1)],
		f312 = r[(y - 1) * width + (x + 0)],
		f313 = r[(y - 1) * width + (x + 1)],
		f321 = r[(y + 0) * width + (x - 1)],
		f322 = r[(y + 0) * width + (x + 0)],
		f323 = r[(y + 0) * width + (x + 1)],
		f331 = r[(y + 1) * width + (x - 1)],
		f332 = r[(y + 1) * width + (x + 0)],
		f333 = r[(y + 1) * width + (x + 1)];

	if ((  f111 > f222 && f112 > f222 && f113 > f222
		&& f121 > f222 && f122 > f222 && f123 > f222
		&& f131 > f222 && f132 > f222 && f133 > f222
		&& f211 > f222 && f212 > f222 && f213 > f222
		&& f221 > f222                && f223 > f222
		&& f231 > f222 && f232 > f222 && f233 > f222
		&& f311 > f222 && f312 > f222 && f313 > f222
		&& f321 > f222 && f322 > f222 && f323 > f222
		&& f331 > f222 && f332 > f222 && f333 > f222)

		||(f111 < f222 && f112 < f222 && f113 < f222
		&& f121 < f222 && f122 < f222 && f123 < f222
		&& f131 < f222 && f132 < f222 && f133 < f222
		&& f211 < f222 && f212 < f222 && f213 < f222
		&& f221 < f222                && f223 < f222
		&& f231 < f222 && f232 < f222 && f233 < f222
		&& f311 < f222 && f312 < f222 && f313 < f222
		&& f321 < f222 && f322 < f222 && f323 < f222
		&& f331 < f222 && f332 < f222 && f333 < f222) ) {

		float
			xx = f223 + f221 - 2 * f222,
			yy = f212 + f232 - 2 * f222,
			xy = (f211 + f233 - f213 - f231) / 4;

		float
			tr = xx + yy,
			det = xx * yy - xy * xy;

		float r = 10;
		// remove edge response
		if (tr * tr / det < (r + 1) * (r + 1) / r) {
			// accurate keypoint location calculate

			float X = x, Y = y;
			int max_try = 5;


			while (max_try > 0 && y > EDGE && y < height - EDGE && x > EDGE && x < width - EDGE) {
				max_try -= 1;

				float
					f11 = m[(y - 1) * width + (x - 1)],
					f12 = m[(y - 1) * width + (x + 0)],
					f13 = m[(y - 1) * width + (x + 1)],
					f21 = m[(y + 0) * width + (x - 1)],
					f22 = m[(y + 0) * width + (x + 0)],
					f23 = m[(y + 0) * width + (x + 1)],
					f31 = m[(y + 1) * width + (x - 1)],
					f32 = m[(y + 1) * width + (x + 0)],
					f33 = m[(y + 1) * width + (x + 1)];



				float DX[2] = {(f23 - f21) / 2, (f32 - f12) / 2};
				float D2X2[4] = {
					f23 + f21 - 2 * f22,         (f33 + f11 - f13 - f31) / 4,
					(f33 + f11 - f13 - f31) / 4, f32 + f12 - 2 * f22
				};
				float one_ad_bc = 1 / (D2X2[0] * D2X2[3] - D2X2[1] * D2X2[2]);
				float D2X2_R[4] = {
					D2X2[3] * one_ad_bc, - D2X2[1] * one_ad_bc,
					- D2X2[2] * one_ad_bc, D2X2[0] * one_ad_bc
				};
				float
					dx = - D2X2_R[0] * DX[0] - D2X2_R[1] * DX[1],
					dy = - D2X2_R[2] * DX[0] - D2X2_R[3] * DX[1];

				if (fabs(dx) <= 0.5 && fabs(dy) <= 0.5) {
					size_t
						o_x = X + dx,
						o_y = Y + dy;
					size_t
						n_y = o_y * to_height / height,
						n_x = o_x * to_width / width;

					float n_D = f22 + (DX[0] * dx + DX[1] * dy) / 2;

					if (fabs(n_D) >= 0.03 * 0xff) {
						// to[n_y * to_width + n_x] = n_D;
						to[n_y * to_width + n_x] = n_th_blur;
						// Build Descriptor

						float sum = 0;
						for (int __X__ = 0; __X__ < 4; __X__++)
						for (int __Y__ = 0; __Y__ < 4; __Y__++) {

							float angles[8] = { 0 };
							for (int x = - 8 + __X__ * 4; x < - 8 + __X__ * 4 + 4; x++)
							for (int y = - 8 + __Y__ * 4; y < - 8 + __Y__ * 4 + 4; y++) {

								// o_y + y, o_y + y + 1
								// o_x + x, o_x + x + 1
								float
									LT = m[(o_y    ) * width + o_x],
									RT = m[(o_y    ) * width + o_x + 1],
									LB = m[(o_y + 1) * width + o_x],
									RB = m[(o_y + 1) * width + o_x + 1];

								float
									L = (LT + LB) / 2,
									R = (RT + RB) / 2,
									T = (LT + RT) / 2,
									B = (LB + RB) / 2;

								float m = sqrt((L - R) * (L - R) + (T - B) * (T - B));
								float theta = atan2(B - T, R - L);

								float weighted = m * descriptor_weight[(y + 8) * 16 + (x + 8)];

								angles[(size_t) ((theta + M_PI_8) / M_PI_4)] += weighted;


							}

							// memcpy(descriptor + (n_y * to_width + n_x) * 128 + (__Y__ * 4 + __X__) * 8, angles, 8 * sizeof(float));
							for (int i = 0; i < 8; i++) {
								sum += angles[i];
								descriptor[(n_y * to_width + n_x) * 128 + (__Y__ * 4 + __X__) * 8 + i] = angles[i];
							}


						}

						// normalization
						for (int i = 0; i< 8; i++)
							descriptor[(n_y * to_width + n_x )* 128 + i] /= sum;



						max_try = -1;
					}

				} else {
					x += round(dx);
					y += round(dy);
				}

			}



		}

	}
}
